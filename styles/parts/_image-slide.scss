@use "mixin" as *;

//二つのアニメーションは同時に実行されてるっぽい


img{
    max-width:100%;
}

.cover-slide{
    position:relative;
    height:80%;
    overflow: hidden;
    &::after{
        content:"";
        position:absolute;
        //z-index:2;
        top:0;
        left:0;
        right:0;
        bottom:0;
        background-color: bisque;

    }
    &.inview{
        &::after{
            @include animation(kf-cover-slide, 1.6s, 1);
            animation-fill-mode: forwards;
        }
    }
}

@keyframes kf-cover-slide{
    0%{
        left:0;
        right:100%;  //要素の右辺が親要素の右辺からどのくらい離すか＝100%なら左端
    }

    50%{
        left:0;
        right:0;
    }

    100%{
        left:100%;
        right:0;
    }
}


.img-zoom{//いらなくね
    opacity:0;

}

.inview .img-zoom{
    opacity:1; //これがないとnormalだからopacity 0 （上での指定）になっちゃう
    @include animation(kf-img-show,1.6s, 1);
    animation-fill-mode: normal;//normalにしてるから、animationで変えたopacityの最後の値を保持しない

    transition:transform 0.3s;
    &:hover{
        transform:scale(1.3);
    }
}

@keyframes kf-img-show{
    0%{
       opacity: 0;
    }

    50%{
        opacity: 0;
    }   //これで急に0->1にできる
    50.1%{
        opacity: 1;
        transform:scale(1.5);
    }
    //100%ではscale(1)に戻る

    100%{
        opacity: 1;
    }
}

.dark{
    position:relative;
    &::before{
        content:"";
        position: absolute;
        top:0;
        left:0;
        width:100%;
        height:100%;
        z-index:3;
        transition:background-color 0.3 ease;
        pointer-events:none; //一番前面のこの要素にhoverしていると、imageのhoverが効かないー＞noneでbeforeのpointereventsを無視することで前面でのhoverを無視
    }
    &:hover::before{
        background-color: rgba(0,0,0,0.4);
    }

    //前面にhoverが適用されて、後面を邪魔する場合：子ｖｓ子（同レべ）のときであり、親子はどちらもhover
    //受け取る＝.darkもimgもうけとる

}